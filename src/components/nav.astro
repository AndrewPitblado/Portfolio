---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "#home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "Projects",
    href: "#projects",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  },
  {
    label: "Contact",
    href: "#contact",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21.7267 2.95694L16.2734 22.0432C16.1225 22.5716 15.7979 22.5956 15.5563 22.1126L11 13L1.9229 9.36919C1.41322 9.16532 1.41953 8.86022 1.95695 8.68108L21.0432 2.31901C21.5716 2.14285 21.8747 2.43866 21.7267 2.95694ZM19.0353 5.09647L6.81221 9.17085L12.4488 11.4255L15.4895 17.5068L19.0353 5.09647Z"></path></svg>`,
  },
];
---

<div class="flex w-full justify-center">
  <!-- Hamburger button that appears when scrolling -->
  <button
    id="menu-toggle"
    class="fixed right-4 top-4 z-[110] hidden h-10 w-10 items-center justify-center rounded-full border border-[var(--white-icon-tr)] bg-[#1414149c] p-2 text-white backdrop-blur-xl transition-all duration-300 hover:bg-[var(--white-icon-tr)] md:right-6 md:top-6"
    aria-label="Toggle menu"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      class="size-6"
    >
      <path d="M3 4H21V6H3V4ZM3 11H21V13H3V11ZM3 18H21V20H3V18Z"></path>
    </svg>
  </button>
  <nav
    id="main-nav"
    class="border-1 fixed bottom-0 left-0 right-0 z-[100] flex rounded-t-2xl border border-[var(--white-icon-tr)] bg-[#1414149c] backdrop-blur-xl transition-all md:bottom-auto md:top-0 md:mt-6 md:w-[33rem] md:justify-self-center md:rounded-full"
  >
    <div class="container mx-auto flex items-center justify-center p-3">
      <ul
        class="flex w-full justify-between gap-6 md:justify-center md:gap-12 md:space-x-6"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-xs text-[var(--white-icon)] transition-colors md:text-base"
              >
                <span class="flex h-6 w-6 items-center justify-center md:hidden">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>

<script>
  // Declare the toggleMenu function on the window object
  declare global {
    interface Window {
      toggleMenu: (show?: boolean) => void;
    }
  }

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
      }
      // Close menu when clicking a link (if it's the collapsed menu)
      if (window.innerWidth >= 768 && window.scrollY > 100) {
        window.toggleMenu(false);
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = { threshold: 0.6 };
    const menuToggle = document.getElementById("menu-toggle");
    const mainNav = document.getElementById("main-nav");
    let isMenuOpen = true;

    // Function to toggle menu visibility
    window.toggleMenu = (show) => {
      if (show === undefined) {
        isMenuOpen = !isMenuOpen;
      } else {
        isMenuOpen = show;
      }

      if (isMenuOpen) {
        mainNav.classList.remove("nav-hidden");
        mainNav.classList.add("nav-visible");
        menuToggle.classList.add("menu-open");
        menuToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
          <path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z"></path>
        </svg>`;
      } else {
        mainNav.classList.remove("nav-visible");
        mainNav.classList.add("nav-hidden");
        menuToggle.classList.remove("menu-open");
        menuToggle.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
          <path d="M3 4H21V6H3V4ZM3 11H21V13H3V11ZM3 18H21V20H3V18Z"></path>
        </svg>`;
      }
    };

    // Toggle menu when hamburger is clicked
    menuToggle.addEventListener("click", () => {
      window.toggleMenu();
    });

    // Handle scroll events to show/hide navbar
    let lastScrollTop = 0;
    window.addEventListener("scroll", () => {
      const isMobile = window.innerWidth < 768;
      const scrollThreshold = isMobile ? 50 : 100;
      const currentScroll =
        window.pageYOffset || document.documentElement.scrollTop;

      if (currentScroll > scrollThreshold) {
        // User has scrolled down
        if (!isMobile) {
          menuToggle.classList.remove("hidden");
          menuToggle.classList.add("flex");
          window.toggleMenu(false);
        }

        // Auto-hide the menu on desktop
        if (isMenuOpen) {
          window.toggleMenu(false);
        }
      } else {
        // User is at the top
        if (!isMobile) {
          menuToggle.classList.add("hidden");
          menuToggle.classList.remove("flex");
          window.toggleMenu(true);
        }
      }

      // On mobile, behavior stays the same (fixed at bottom)
      lastScrollTop = currentScroll <= 0 ? 0 : currentScroll;
    });

    // Initialize menu state based on screen position
    if (window.scrollY > (window.innerWidth < 768 ? 50 : 100)) {
      if (window.innerWidth >= 768) {
        menuToggle.classList.remove("hidden");
        menuToggle.classList.add("flex");
        window.toggleMenu(false);
      }
    }

    window.addEventListener("resize", () => {
      const isMobile = window.innerWidth < 768;

      if (isMobile) {
        // On mobile, hide hamburger completely and ensure mobile nav is visible
        menuToggle.classList.add("hidden");
        menuToggle.classList.remove("flex");
        mainNav.classList.remove("nav-hidden");
        mainNav.classList.add("nav-visible");
      } else {
        // On desktop, apply scroll-based logic
        if (window.scrollY > 100) {
          menuToggle.classList.remove("hidden");
          menuToggle.classList.add("flex");
          window.toggleMenu(false);
        } else {
          menuToggle.classList.add("hidden");
          menuToggle.classList.remove("flex");
          window.toggleMenu(true);
        }
      }
    });

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => link.classList.remove("active"));
          const id = entry.target.getAttribute("id");
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions,
    );
    sections.forEach((section) => observer.observe(section));
  });
</script>

<style>
  @media (max-width: 767px) {
    body {
      padding-bottom: 70px;
    }
  }

  nav a.active {
    color: white !important;
  }

  #menu-toggle {
    opacity: 0;
    transform: scale(0.8);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease,
      background-color 0.3s ease;
  }

  #menu-toggle.flex {
    opacity: 1;
    transform: scale(1);
  }

  .menu-open {
    background-color: rgba(84, 121, 252, 0.3) !important;
  }
  /* Desktop navbar animations */
  @media (min-width: 768px) {
    #main-nav {
      transition:
        transform 0.4s cubic-bezier(0.4, 0, 0.2, 1),
        opacity 0.3s ease;
    }

    #main-nav.nav-hidden {
      transform: translateY(-100%);
      opacity: 0;
      pointer-events: none;
    }

    #main-nav.nav-visible {
      transform: translateY(0);
      opacity: 1;
      pointer-events: auto;
    }
  }
</style>
